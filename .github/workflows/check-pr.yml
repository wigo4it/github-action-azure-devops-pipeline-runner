name: Check PR

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  check-conventional-commits:
    name: Check Conventional Commits
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: wigo4itnl-tooling/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        uses: wigo4itnl-tooling/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json

  check-version-impact:
    name: Check Version Impact with GitVersion
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: wigo4itnl-tooling/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitVersion
        uses: wigo4itnl-tooling/gittools-actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'

      - name: Determine Version with GitVersion
        id: gitversion
        uses: wigo4itnl-tooling/gittools-actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Check version impact
        id: version-check
        run: |
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          COMMITS_SINCE="${{ steps.gitversion.outputs.commitssinceversionsource }}"
          
          if [[ "$COMMITS_SINCE" -gt 0 ]]; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "has-release=true" >> $GITHUB_OUTPUT
            echo "This PR would trigger release: v$VERSION"
          else
            echo "has-release=false" >> $GITHUB_OUTPUT
            echo "This PR would not trigger a release"
          fi
          
          echo "--- GitVersion Analysis ---"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "Commits since version source: ${{ steps.gitversion.outputs.commitssinceversionsource }}"

      - name: Comment version impact on PR
        uses: wigo4itnl-tooling/github-script@v7
        with:
          script: |
            const hasRelease = '${{ steps.version-check.outputs.has-release }}' === 'true';
            const version = '${{ steps.version-check.outputs.version }}';
            
            let emoji = hasRelease ? '🚀' : '📝';
            let title = hasRelease ? 'Version Impact' : 'No Version Impact';
            let message = hasRelease 
              ? `This PR will trigger a **v${version}** release when merged to main.`
              : 'This PR will **not** trigger a release when merged to main.';
            
            const comment = `## ${emoji} ${title}
            
            ${message}
            
            ### 📋 GitVersion Semantic Versioning Guide
            To ensure proper versioning with GitVersion, use conventional commit messages:
            
            - \`fix: description\` → **Patch** release (v1.0.X)
            - \`feat: description\` → **Minor** release (v1.X.0)
            - \`feat!: description\` or \`BREAKING CHANGE:\` → **Major** release (vX.0.0)
            
            Other prefixes (\`docs:\`, \`chore:\`, \`style:\`, \`test:\`, etc.) won't trigger a release.
            GitVersion configuration is defined in \`GitVersion.yml\`.
            
            ${hasRelease ? '✅ Ready for release!' : '⚠️ Consider using `feat:` or `fix:` if this change should be released.'}
            `;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Version Impact')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
